-- $Header$
-- vim: set noet sw=4 ts=4:

-------------------------------------------------------------------------------
-- Documentation Extensions for IBM DB2 UDB for Linux/UNIX/Windows
--
-- FEATURES
-- ========
-- The extended capabilities of this system are as follows:
--
-- * Maximum length of comments is 32K chars instead of 254 chars
-- * Ability to comment on system routines (which for some bizarre reason
--   is not permitted normally in DB2)
-- * Ability to comment on routine parameters (the original SYSCAT.ROUTINEPARMS
--   view contains a REMARKS field, but there's no way to comment on routine
--   parameters using COMMENT ON)
-- * Easier to edit comments using standard SQL (e.g. to comments on several
--   overloaded routines one could comment on the first using INSERT..VALUES,
--   then add comments for the overloaded versions using INSERT..SELECT on
--   the first
--
-- OVERVIEW
-- ========
-- This script creates various objects in a DB2 database for the purpose of
-- extending the documentation capabilities of DB2. Specifically, the following
-- objects are created:
--
-- DOCDATA schema
--   This schema contains several simple tables named after their counterparts
--   in the SYSCAT schema (e.g. COLUMNS, TABLES, TABCONST, etc). Each table
--   contains a unique key (e.g. TABSCHEMA, TABNAME, COLNAME for COLUMNS) plus
--   a LONG VARCHAR REMARKS field which can hold considerably longer comments
--   than the typical VARCHAR(254) REMARKS fields in the SYSCAT schema.
--
-- DOCCAT schema
--   This schema duplicates all the views from SYSCAT schema, replacing the
--   REMARKS field (if the view has one) with the remarks from the
--   corresponding DOCDATA table (or the remarks from the original SYSCAT
--   view if the DOCDATA table doesn't contain an entry for the target object).
--
-- DOCTOOLS schema
--   Contains a stored procedure called COMMENTS_TO_DOC which, if called, will
--   copy all non-NULL, non-blank remarks from the SYSCAT views to the
--   corresponding DOCDATA tables. Also contains a view called DOC_TO_COMMENTS
--   which generates "COMMENT ON" statements for the purpose of copying the
--   contents of the DOCDATA tables back to the SYSCAT views.
--
-- USAGE
-- =====
-- To take advantage of the extended remarks, simply point any SYSCAT queries
-- at the DOCCAT schema instead (all views and fields have the same names, so
-- no other alterations should be necessary).
--
-- To document objects in your database, simply INSERT rows into the DOCDATA
-- tables instead of using COMMENT ON. You may find it easier to use 
--
-- To support applications which can only query SYSCAT, periodically update the
-- original comments in SYSCAT by querying the DOCTOOLS.DOC_TO_COMMENTS view,
-- redirecting the results to a file, then execute the file. Comments longer
-- than 254 characters will be truncated to 251 characters with ellipsis (...)
-- appended to indicate truncation has occurred.
--
-- INSTALLATION
-- ============
-- 1. Connect to the database you wish to install these features in
-- 2. Execute this file using bang (!) as the statement terminator
-- 3. Optionally CALL the DOCTOOLS.COMMENTS_TO_DOC stored procedure (with
--    no arguments) to copy any existing comments to the DOCDATA tables
-- 4. Insert or update rows in the DOCDATA tables
--
-- NOTES
-- =====
-- The DOCTOOLS.COMMENTS_TO_DOC stored procedure deletes the contents of the
-- DOCDATA tables prior to inserting data from the SYSCAT views. Therefore if
-- you have any extended comments (longer than 254 characters), or comments
-- which exist only in the DOCDATA tables, but not the SYSCAT views, you will
-- lose them.
--
-- The doccat_comments.sql script included in this package inserts entries
-- into the DOCCAT table for most system objects in a DB2 database (everything
-- in SYSCAT, SYSSTAT, and SYSFUN, plus some entries for the SYSIBM objects).
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Destroy the old DOCDATA schema, if it exists
-------------------------------------------------------------------------------
DROP TABLE DOCDATA.DATATYPES!
DROP TABLE DOCDATA.COLUMNS!
DROP TABLE DOCDATA.TABCONST!
DROP TABLE DOCDATA.INDEXES!
DROP TABLE DOCDATA.ROUTINES!
DROP TABLE DOCDATA.ROUTINEPARMS!
DROP TABLE DOCDATA.TABLES!
DROP TABLE DOCDATA.SCHEMATA!
DROP TABLE DOCDATA.TABLESPACES!
DROP SCHEMA DOCDATA RESTRICT!
DROP VIEW DOCCAT.ATTRIBUTES!
DROP VIEW DOCCAT.BUFFERPOOLDBPARTITIONS!
DROP VIEW DOCCAT.BUFFERPOOLNODES!
DROP VIEW DOCCAT.BUFFERPOOLS!
DROP VIEW DOCCAT.CASTFUNCTIONS!
DROP VIEW DOCCAT.CHECKS!
DROP VIEW DOCCAT.COLAUTH!
DROP VIEW DOCCAT.COLCHECKS!
DROP VIEW DOCCAT.COLDIST!
DROP VIEW DOCCAT.COLGROUPCOLS!
DROP VIEW DOCCAT.COLGROUPDIST!
DROP VIEW DOCCAT.COLGROUPDISTCOUNTS!
DROP VIEW DOCCAT.COLGROUPS!
DROP VIEW DOCCAT.COLIDENTATTRIBUTES!
DROP VIEW DOCCAT.COLOPTIONS!
DROP VIEW DOCCAT.COLUSE!
DROP VIEW DOCCAT.CONSTDEP!
DROP VIEW DOCCAT.DBAUTH!
DROP VIEW DOCCAT.DBPARTITIONGROUPDEF!
DROP VIEW DOCCAT.DBPARTITIONGROUPS!
DROP VIEW DOCCAT.EVENTMONITORS!
DROP VIEW DOCCAT.EVENTS!
DROP VIEW DOCCAT.EVENTTABLES!
DROP VIEW DOCCAT.FULLHIERARCHIES!
DROP VIEW DOCCAT.FUNCDEP!
DROP VIEW DOCCAT.FUNCMAPOPTIONS!
DROP VIEW DOCCAT.FUNCMAPPARMOPTIONS!
DROP VIEW DOCCAT.FUNCMAPPINGS!
DROP VIEW DOCCAT.FUNCPARMS!
DROP VIEW DOCCAT.HIERARCHIES!
DROP VIEW DOCCAT.INDEXAUTH!
DROP VIEW DOCCAT.INDEXCOLUSE!
DROP VIEW DOCCAT.INDEXDEP!
DROP VIEW DOCCAT.INDEXEXPLOITRULES!
DROP VIEW DOCCAT.INDEXEXTENSIONDEP!
DROP VIEW DOCCAT.INDEXEXTENSIONMETHODS!
DROP VIEW DOCCAT.INDEXEXTENSIONPARMS!
DROP VIEW DOCCAT.INDEXEXTENSIONS!
DROP VIEW DOCCAT.INDEXOPTIONS!
DROP VIEW DOCCAT.KEYCOLUSE!
DROP VIEW DOCCAT.LIBRARIES!
DROP VIEW DOCCAT.LIBRARYAUTH!
DROP VIEW DOCCAT.LIBRARYBINDFILES!
DROP VIEW DOCCAT.LIBRARYVERSIONS!
DROP VIEW DOCCAT.NAMEMAPPINGS!
DROP VIEW DOCCAT.NODEGROUPDEF!
DROP VIEW DOCCAT.NODEGROUPS!
DROP VIEW DOCCAT.PACKAGEAUTH!
DROP VIEW DOCCAT.PACKAGEDEP!
DROP VIEW DOCCAT.PACKAGES!
DROP VIEW DOCCAT.PARTITIONMAPS!
DROP VIEW DOCCAT.PASSTHRUAUTH!
DROP VIEW DOCCAT.PREDICATESPECS!
DROP VIEW DOCCAT.PROCOPTIONS!
DROP VIEW DOCCAT.PROCPARMOPTIONS!
DROP VIEW DOCCAT.PROCPARMS!
DROP VIEW DOCCAT.REFERENCES!
DROP VIEW DOCCAT.REVTYPEMAPPINGS!
DROP VIEW DOCCAT.ROUTINEAUTH!
DROP VIEW DOCCAT.ROUTINEDEP!
DROP VIEW DOCCAT.SCHEMAAUTH!
DROP VIEW DOCCAT.SEQUENCEAUTH!
DROP VIEW DOCCAT.SEQUENCES!
DROP VIEW DOCCAT.SERVEROPTIONS!
DROP VIEW DOCCAT.SERVERS!
DROP VIEW DOCCAT.STATEMENTS!
DROP VIEW DOCCAT.TABAUTH!
DROP VIEW DOCCAT.TABDEP!
DROP VIEW DOCCAT.TABOPTIONS!
DROP VIEW DOCCAT.TBSPACEAUTH!
DROP VIEW DOCCAT.TRANSFORMS!
DROP VIEW DOCCAT.TRIGDEP!
DROP VIEW DOCCAT.TRIGGERS!
DROP VIEW DOCCAT.TYPEMAPPINGS!
DROP VIEW DOCCAT.USEROPTIONS!
DROP VIEW DOCCAT.VIEWDEP!
DROP VIEW DOCCAT.VIEWS!
DROP VIEW DOCCAT.WRAPOPTIONS!
DROP VIEW DOCCAT.WRAPPERS!
DROP VIEW DOCCAT.XMLOBJECTAUTH!
DROP VIEW DOCCAT.XMLOBJECTPROPERTIES!
DROP VIEW DOCCAT.XMLOBJECTRELDEP!
DROP VIEW DOCCAT.XMLOBJECTS!
DROP VIEW DOCCAT.XMLOBJECTXMLDEP!
DROP VIEW DOCCAT.XMLPHYSICALCOLLECTIONS!
DROP VIEW DOCCAT.XMLQUERIES!
DROP VIEW DOCCAT.XMLRELATIONSHIPS!
DROP VIEW DOCCAT.XMLRSPROPERTIES!
DROP VIEW DOCCAT.XMLSTATS!
DROP VIEW DOCCAT.COLUMNS!
DROP VIEW DOCCAT.DATATYPES!
DROP VIEW DOCCAT.FUNCTIONS!
DROP VIEW DOCCAT.INDEXES!
DROP VIEW DOCCAT.PROCEDURES!
DROP VIEW DOCCAT.ROUTINEPARMS!
DROP VIEW DOCCAT.ROUTINES!
DROP VIEW DOCCAT.SCHEMATA!
DROP VIEW DOCCAT.TABCONST!
DROP VIEW DOCCAT.TABLES!
DROP VIEW DOCCAT.TABLESPACES!
DROP SCHEMA DOCCAT RESTRICT!
DROP VIEW DOCTOOLS.DOC_TO_COMMENTS!
DROP SPECIFIC PROCEDURE DOCTOOLS.COMMENTS_TO_DOC!
DROP SCHEMA DOCTOOLS RESTRICT!
COMMIT!

-------------------------------------------------------------------------------
-- Create the schemas to contain all the tables and views of the documentation
-- extension system
-------------------------------------------------------------------------------
CREATE SCHEMA DOCDATA!
CREATE SCHEMA DOCCAT!
CREATE SCHEMA DOCTOOLS!

-------------------------------------------------------------------------------
-- Comments for DATATYPES
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.DATATYPES (
	TYPESCHEMA     VARCHAR(128)    NOT NULL,
	TYPENAME       VARCHAR(18)     NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.DATATYPES_PK
	ON DOCDATA.DATATYPES (TYPESCHEMA, TYPENAME)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.DATATYPES
	ADD CONSTRAINT PK PRIMARY KEY (TYPESCHEMA, TYPENAME)!

-------------------------------------------------------------------------------
-- Comments for COLUMNS
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.COLUMNS (
	TABSCHEMA      VARCHAR(128)    NOT NULL,
	TABNAME        VARCHAR(128)    NOT NULL,
	COLNAME        VARCHAR(128)    NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.COLUMNS_PK
	ON DOCDATA.COLUMNS (TABSCHEMA, TABNAME, COLNAME)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.COLUMNS
	ADD CONSTRAINT PK PRIMARY KEY (TABSCHEMA, TABNAME, COLNAME)!

-------------------------------------------------------------------------------
-- Comments for CONSTRAINTS
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.TABCONST (
	TABSCHEMA      VARCHAR(128)    NOT NULL,
	TABNAME        VARCHAR(128)    NOT NULL,
	CONSTNAME      VARCHAR(18)     NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.TABCONST_PK
	ON DOCDATA.TABCONST (TABSCHEMA, TABNAME, CONSTNAME)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.TABCONST
	ADD CONSTRAINT PK PRIMARY KEY (TABSCHEMA, TABNAME, CONSTNAME)!

-------------------------------------------------------------------------------
-- Comments for INDEXES
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.INDEXES (
	INDSCHEMA      VARCHAR(128)    NOT NULL,
	INDNAME        VARCHAR(18)     NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.INDEXES_PK
	ON DOCDATA.INDEXES (INDSCHEMA, INDNAME)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.INDEXES
	ADD CONSTRAINT PK PRIMARY KEY (INDSCHEMA, INDNAME)!

-------------------------------------------------------------------------------
-- Comments for ROUTINES
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.ROUTINES (
	ROUTINESCHEMA  VARCHAR(128)    NOT NULL,
	SPECIFICNAME   VARCHAR(128)    NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.ROUTINES_PK
	ON DOCDATA.ROUTINES (ROUTINESCHEMA, SPECIFICNAME)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.ROUTINES
	ADD CONSTRAINT PK PRIMARY KEY (ROUTINESCHEMA, SPECIFICNAME)!

-------------------------------------------------------------------------------
-- Comments for ROUTINEPARMS
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.ROUTINEPARMS (
	ROUTINESCHEMA  VARCHAR(128)    NOT NULL,
	SPECIFICNAME   VARCHAR(128)    NOT NULL,
	ROWTYPE        CHAR(1)         NOT NULL,
	ORDINAL        SMALLINT        NOT NULL,
	PARMNAME       VARCHAR(128)    DEFAULT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.ROUTINEPARMS_PK
	ON DOCDATA.ROUTINEPARMS (ROUTINESCHEMA, SPECIFICNAME, ROWTYPE, ORDINAL)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.ROUTINEPARMS
	ADD CONSTRAINT PK PRIMARY KEY (ROUTINESCHEMA, SPECIFICNAME, ROWTYPE, ORDINAL)
	ADD CONSTRAINT ROWTYPE_CK CHECK (ROWTYPE IN ('B', 'C', 'O', 'P', 'R'))
	ADD CONSTRAINT ORDINAL_CK CHECK (ORDINAL >= 0)!

-------------------------------------------------------------------------------
-- Comments for SCHEMATA
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.SCHEMATA (
	SCHEMANAME     VARCHAR(128)    NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.SCHEMATA_PK
	ON DOCDATA.SCHEMATA (SCHEMANAME)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.SCHEMATA
	ADD CONSTRAINT PK PRIMARY KEY (SCHEMANAME)!

-------------------------------------------------------------------------------
-- Comments for TABLES
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.TABLES (
	TABSCHEMA      VARCHAR(128)    NOT NULL,
	TABNAME        VARCHAR(128)    NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.TABLES_PK
	ON DOCDATA.TABLES (TABSCHEMA, TABNAME)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.TABLES
	ADD CONSTRAINT PK PRIMARY KEY (TABSCHEMA, TABNAME)!

-------------------------------------------------------------------------------
-- Comments for TABLESPACES
-------------------------------------------------------------------------------
CREATE TABLE DOCDATA.TABLESPACES (
	TBSPACE        VARCHAR(18)     NOT NULL,
	REMARKS        LONG VARCHAR    DEFAULT NULL
)!

CREATE UNIQUE INDEX DOCDATA.TABLESPACES_PK
	ON DOCDATA.TABLESPACES (TBSPACE)
	ALLOW REVERSE SCANS!

ALTER TABLE DOCDATA.TABLESPACES
	ADD CONSTRAINT PK PRIMARY KEY (TBSPACE)!

-------------------------------------------------------------------------------
-- Create replacement SYSCAT views in DOCCAT
-------------------------------------------------------------------------------
-- Simple SELECT * views
CREATE VIEW DOCCAT.ATTRIBUTES AS SELECT * FROM SYSCAT.ATTRIBUTES!
CREATE VIEW DOCCAT.BUFFERPOOLDBPARTITIONS AS SELECT * FROM SYSCAT.BUFFERPOOLDBPARTITIONS!
CREATE VIEW DOCCAT.BUFFERPOOLNODES AS SELECT * FROM SYSCAT.BUFFERPOOLNODES!
CREATE VIEW DOCCAT.BUFFERPOOLS AS SELECT * FROM SYSCAT.BUFFERPOOLS!
CREATE VIEW DOCCAT.CASTFUNCTIONS AS SELECT * FROM SYSCAT.CASTFUNCTIONS!
CREATE VIEW DOCCAT.CHECKS AS SELECT * FROM SYSCAT.CHECKS!
CREATE VIEW DOCCAT.COLAUTH AS SELECT * FROM SYSCAT.COLAUTH!
CREATE VIEW DOCCAT.COLCHECKS AS SELECT * FROM SYSCAT.COLCHECKS!
CREATE VIEW DOCCAT.COLDIST AS SELECT * FROM SYSCAT.COLDIST!
CREATE VIEW DOCCAT.COLGROUPCOLS AS SELECT * FROM SYSCAT.COLGROUPCOLS!
CREATE VIEW DOCCAT.COLGROUPDIST AS SELECT * FROM SYSCAT.COLGROUPDIST!
CREATE VIEW DOCCAT.COLGROUPDISTCOUNTS AS SELECT * FROM SYSCAT.COLGROUPDISTCOUNTS!
CREATE VIEW DOCCAT.COLGROUPS AS SELECT * FROM SYSCAT.COLGROUPS!
CREATE VIEW DOCCAT.COLIDENTATTRIBUTES AS SELECT * FROM SYSCAT.COLIDENTATTRIBUTES!
CREATE VIEW DOCCAT.COLOPTIONS AS SELECT * FROM SYSCAT.COLOPTIONS!
CREATE VIEW DOCCAT.COLUSE AS SELECT * FROM SYSCAT.COLUSE!
CREATE VIEW DOCCAT.CONSTDEP AS SELECT * FROM SYSCAT.CONSTDEP!
CREATE VIEW DOCCAT.DBAUTH AS SELECT * FROM SYSCAT.DBAUTH!
CREATE VIEW DOCCAT.DBPARTITIONGROUPDEF AS SELECT * FROM SYSCAT.DBPARTITIONGROUPDEF!
CREATE VIEW DOCCAT.DBPARTITIONGROUPS AS SELECT * FROM SYSCAT.DBPARTITIONGROUPS!
CREATE VIEW DOCCAT.EVENTMONITORS AS SELECT * FROM SYSCAT.EVENTMONITORS!
CREATE VIEW DOCCAT.EVENTS AS SELECT * FROM SYSCAT.EVENTS!
CREATE VIEW DOCCAT.EVENTTABLES AS SELECT * FROM SYSCAT.EVENTTABLES!
CREATE VIEW DOCCAT.FULLHIERARCHIES AS SELECT * FROM SYSCAT.FULLHIERARCHIES!
CREATE VIEW DOCCAT.FUNCDEP AS SELECT * FROM SYSCAT.FUNCDEP!
CREATE VIEW DOCCAT.FUNCMAPOPTIONS AS SELECT * FROM SYSCAT.FUNCMAPOPTIONS!
CREATE VIEW DOCCAT.FUNCMAPPARMOPTIONS AS SELECT * FROM SYSCAT.FUNCMAPPARMOPTIONS!
CREATE VIEW DOCCAT.FUNCMAPPINGS AS SELECT * FROM SYSCAT.FUNCMAPPINGS!
CREATE VIEW DOCCAT.FUNCPARMS AS SELECT * FROM SYSCAT.FUNCPARMS!
CREATE VIEW DOCCAT.HIERARCHIES AS SELECT * FROM SYSCAT.HIERARCHIES!
CREATE VIEW DOCCAT.INDEXAUTH AS SELECT * FROM SYSCAT.INDEXAUTH!
CREATE VIEW DOCCAT.INDEXCOLUSE AS SELECT * FROM SYSCAT.INDEXCOLUSE!
CREATE VIEW DOCCAT.INDEXDEP AS SELECT * FROM SYSCAT.INDEXDEP!
CREATE VIEW DOCCAT.INDEXEXPLOITRULES AS SELECT * FROM SYSCAT.INDEXEXPLOITRULES!
CREATE VIEW DOCCAT.INDEXEXTENSIONDEP AS SELECT * FROM SYSCAT.INDEXEXTENSIONDEP!
CREATE VIEW DOCCAT.INDEXEXTENSIONMETHODS AS SELECT * FROM SYSCAT.INDEXEXTENSIONMETHODS!
CREATE VIEW DOCCAT.INDEXEXTENSIONPARMS AS SELECT * FROM SYSCAT.INDEXEXTENSIONPARMS!
CREATE VIEW DOCCAT.INDEXEXTENSIONS AS SELECT * FROM SYSCAT.INDEXEXTENSIONS!
CREATE VIEW DOCCAT.INDEXOPTIONS AS SELECT * FROM SYSCAT.INDEXOPTIONS!
CREATE VIEW DOCCAT.KEYCOLUSE AS SELECT * FROM SYSCAT.KEYCOLUSE!
CREATE VIEW DOCCAT.LIBRARIES AS SELECT * FROM SYSCAT.LIBRARIES!
CREATE VIEW DOCCAT.LIBRARYAUTH AS SELECT * FROM SYSCAT.LIBRARYAUTH!
CREATE VIEW DOCCAT.LIBRARYBINDFILES AS SELECT * FROM SYSCAT.LIBRARYBINDFILES!
CREATE VIEW DOCCAT.LIBRARYVERSIONS AS SELECT * FROM SYSCAT.LIBRARYVERSIONS!
CREATE VIEW DOCCAT.NAMEMAPPINGS AS SELECT * FROM SYSCAT.NAMEMAPPINGS!
CREATE VIEW DOCCAT.NODEGROUPDEF AS SELECT * FROM SYSCAT.NODEGROUPDEF!
CREATE VIEW DOCCAT.NODEGROUPS AS SELECT * FROM SYSCAT.NODEGROUPS!
CREATE VIEW DOCCAT.PACKAGEAUTH AS SELECT * FROM SYSCAT.PACKAGEAUTH!
CREATE VIEW DOCCAT.PACKAGEDEP AS SELECT * FROM SYSCAT.PACKAGEDEP!
CREATE VIEW DOCCAT.PACKAGES AS SELECT * FROM SYSCAT.PACKAGES!
CREATE VIEW DOCCAT.PARTITIONMAPS AS SELECT * FROM SYSCAT.PARTITIONMAPS!
CREATE VIEW DOCCAT.PASSTHRUAUTH AS SELECT * FROM SYSCAT.PASSTHRUAUTH!
CREATE VIEW DOCCAT.PREDICATESPECS AS SELECT * FROM SYSCAT.PREDICATESPECS!
CREATE VIEW DOCCAT.PROCOPTIONS AS SELECT * FROM SYSCAT.PROCOPTIONS!
CREATE VIEW DOCCAT.PROCPARMOPTIONS AS SELECT * FROM SYSCAT.PROCPARMOPTIONS!
CREATE VIEW DOCCAT.PROCPARMS AS SELECT * FROM SYSCAT.PROCPARMS!
CREATE VIEW DOCCAT.REFERENCES AS SELECT * FROM SYSCAT.REFERENCES!
CREATE VIEW DOCCAT.REVTYPEMAPPINGS AS SELECT * FROM SYSCAT.REVTYPEMAPPINGS!
CREATE VIEW DOCCAT.ROUTINEAUTH AS SELECT * FROM SYSCAT.ROUTINEAUTH!
CREATE VIEW DOCCAT.ROUTINEDEP AS SELECT * FROM SYSCAT.ROUTINEDEP!
CREATE VIEW DOCCAT.SCHEMAAUTH AS SELECT * FROM SYSCAT.SCHEMAAUTH!
CREATE VIEW DOCCAT.SEQUENCEAUTH AS SELECT * FROM SYSCAT.SEQUENCEAUTH!
CREATE VIEW DOCCAT.SEQUENCES AS SELECT * FROM SYSCAT.SEQUENCES!
CREATE VIEW DOCCAT.SERVEROPTIONS AS SELECT * FROM SYSCAT.SERVEROPTIONS!
CREATE VIEW DOCCAT.SERVERS AS SELECT * FROM SYSCAT.SERVERS!
CREATE VIEW DOCCAT.STATEMENTS AS SELECT * FROM SYSCAT.STATEMENTS!
CREATE VIEW DOCCAT.TABAUTH AS SELECT * FROM SYSCAT.TABAUTH!
CREATE VIEW DOCCAT.TABDEP AS SELECT * FROM SYSCAT.TABDEP!
CREATE VIEW DOCCAT.TABOPTIONS AS SELECT * FROM SYSCAT.TABOPTIONS!
CREATE VIEW DOCCAT.TBSPACEAUTH AS SELECT * FROM SYSCAT.TBSPACEAUTH!
CREATE VIEW DOCCAT.TRANSFORMS AS SELECT * FROM SYSCAT.TRANSFORMS!
CREATE VIEW DOCCAT.TRIGDEP AS SELECT * FROM SYSCAT.TRIGDEP!
CREATE VIEW DOCCAT.TRIGGERS AS SELECT * FROM SYSCAT.TRIGGERS!
CREATE VIEW DOCCAT.TYPEMAPPINGS AS SELECT * FROM SYSCAT.TYPEMAPPINGS!
CREATE VIEW DOCCAT.USEROPTIONS AS SELECT * FROM SYSCAT.USEROPTIONS!
CREATE VIEW DOCCAT.VIEWDEP AS SELECT * FROM SYSCAT.VIEWDEP!
CREATE VIEW DOCCAT.VIEWS AS SELECT * FROM SYSCAT.VIEWS!
CREATE VIEW DOCCAT.WRAPOPTIONS AS SELECT * FROM SYSCAT.WRAPOPTIONS!
CREATE VIEW DOCCAT.WRAPPERS AS SELECT * FROM SYSCAT.WRAPPERS!
CREATE VIEW DOCCAT.XMLOBJECTAUTH AS SELECT * FROM SYSCAT.XMLOBJECTAUTH!
CREATE VIEW DOCCAT.XMLOBJECTPROPERTIES AS SELECT * FROM SYSCAT.XMLOBJECTPROPERTIES!
CREATE VIEW DOCCAT.XMLOBJECTRELDEP AS SELECT * FROM SYSCAT.XMLOBJECTRELDEP!
CREATE VIEW DOCCAT.XMLOBJECTS AS SELECT * FROM SYSCAT.XMLOBJECTS!
CREATE VIEW DOCCAT.XMLOBJECTXMLDEP AS SELECT * FROM SYSCAT.XMLOBJECTXMLDEP!
CREATE VIEW DOCCAT.XMLPHYSICALCOLLECTIONS AS SELECT * FROM SYSCAT.XMLPHYSICALCOLLECTIONS!
CREATE VIEW DOCCAT.XMLQUERIES AS SELECT * FROM SYSCAT.XMLQUERIES!
CREATE VIEW DOCCAT.XMLRELATIONSHIPS AS SELECT * FROM SYSCAT.XMLRELATIONSHIPS!
CREATE VIEW DOCCAT.XMLRSPROPERTIES AS SELECT * FROM SYSCAT.XMLRSPROPERTIES!
CREATE VIEW DOCCAT.XMLSTATS AS SELECT * FROM SYSCAT.XMLSTATS!

-- Views with DOCDATA enhancements
CREATE VIEW DOCCAT.COLUMNS AS
	SELECT
		S.TABSCHEMA,
		S.TABNAME,
		S.COLNAME,
		S.COLNO,
		S.TYPESCHEMA,
		S.TYPENAME,
		S.LENGTH,
		S.SCALE,
		S.DEFAULT,
		S.NULLS,
		S.CODEPAGE,
		S.LOGGED,
		S.COMPACT,
		S.COLCARD,
		S.HIGH2KEY,
		S.LOW2KEY,
		S.AVGCOLLEN,
		S.KEYSEQ,
		S.PARTKEYSEQ,
		S.NQUANTILES,
		S.NMOSTFREQ,
		S.NUMNULLS,
		S.TARGET_TYPESCHEMA,
		S.TARGET_TYPENAME,
		S.SCOPE_TABSCHEMA,
		S.SCOPE_TABNAME,
		S.SOURCE_TABSCHEMA,
		S.SOURCE_TABNAME,
		S.DL_FEATURES,
		S.SPECIAL_PROPS,
		S.HIDDEN,
		S.INLINE_LENGTH,
		S.IDENTITY,
		S.GENERATED,
		S.COMPRESS,
		S.TEXT,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS,
		S.AVGDISTINCTPERPAGE,
		S.PAGEVARIANCERATIO,
		S.SUB_COUNT,
		S.SUB_DELIM_LENGTH
	FROM
		SYSCAT.COLUMNS S
		LEFT OUTER JOIN DOCDATA.COLUMNS D
			ON S.TABSCHEMA = D.TABSCHEMA
			AND S.TABNAME = D.TABNAME
			AND S.COLNAME = D.COLNAME!

CREATE VIEW DOCCAT.DATATYPES AS
	SELECT
		S.TYPESCHEMA,
		S.TYPENAME,
		S.DEFINER,
		S.SOURCESCHEMA,
		S.SOURCENAME,
		S.METATYPE,
		S.TYPEID,
		S.SOURCETYPEID,
		S.LENGTH,
		S.SCALE,
		S.CODEPAGE,
		S.CREATE_TIME,
		S.ATTRCOUNT,
		S.INSTANTIABLE,
		S.WITH_FUNC_ACCESS,
		S.FINAL,
		S.INLINE_LENGTH,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS,
		S.JARSCHEMA,
		S.JAR_ID,
		S.CLASS,
		S.SQLJ_REPRESENTATION,
		S.NATURAL_INLINE_LENGTH,
		S.ALTER_TIME
	FROM
		SYSCAT.DATATYPES S
		LEFT OUTER JOIN DOCDATA.DATATYPES D
			ON S.TYPESCHEMA = D.TYPESCHEMA
			AND S.TYPENAME = D.TYPENAME!

CREATE VIEW DOCCAT.FUNCTIONS AS
	SELECT
		S.FUNCSCHEMA,
		S.FUNCNAME,
		S.SPECIFICNAME,
		S.DEFINER,
		S.FUNCID,
		S.RETURN_TYPE,
		S.ORIGIN,
		S.TYPE,
		S.METHOD,
		S.EFFECT,
		S.PARM_COUNT,
		S.PARM_SIGNATURE,
		S.CREATE_TIME,
		S.QUALIFIER,
		S.WITH_FUNC_ACCESS,
		S.TYPE_PRESERVING,
		S.VARIANT,
		S.SIDE_EFFECTS,
		S.FENCED,
		S.NULLCALL,
		S.CAST_FUNCTION,
		S.ASSIGN_FUNCTION,
		S.SCRATCHPAD,
		S.FINAL_CALL,
		S.PARALLELIZABLE,
		S.CONTAINS_SQL,
		S.DBINFO,
		S.RESULT_COLS,
		S.LANGUAGE,
		S.IMPLEMENTATION,
		S.CLASS,
		S.JAR_ID,
		S.PARM_STYLE,
		S.SOURCE_SCHEMA,
		S.SOURCE_SPECIFIC,
		S.IOS_PER_INVOC,
		S.INSTS_PER_INVOC,
		S.IOS_PER_ARGBYTE,
		S.INSTS_PER_ARGBYTE,
		S.PERCENT_ARGBYTES,
		S.INITIAL_IOS,
		S.INITIAL_INSTS,
		S.CARDINALITY,
		S.IMPLEMENTED,
		S.SELECTIVITY,
		S.OVERRIDDEN_FUNCID,
		S.SUBJECT_TYPESCHEMA,
		S.SUBJECT_TYPENAME,
		S.FUNC_PATH,
		S.BODY,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS
	FROM
		SYSCAT.FUNCTIONS S
		LEFT OUTER JOIN DOCDATA.ROUTINES D
			ON S.FUNCSCHEMA = D.ROUTINESCHEMA
			AND S.SPECIFICNAME = D.SPECIFICNAME!

CREATE VIEW DOCCAT.INDEXES AS
	SELECT
		S.INDSCHEMA,
		S.INDNAME,
		S.DEFINER,
		S.TABSCHEMA,
		S.TABNAME,
		S.COLNAMES,
		S.UNIQUERULE,
		S.MADE_UNIQUE,
		S.COLCOUNT,
		S.UNIQUE_COLCOUNT,
		S.INDEXTYPE,
		S.ENTRYTYPE,
		S.PCTFREE,
		S.IID,
		S.NLEAF,
		S.NLEVELS,
		S.FIRSTKEYCARD,
		S.FIRST2KEYCARD,
		S.FIRST3KEYCARD,
		S.FIRST4KEYCARD,
		S.FULLKEYCARD,
		S.CLUSTERRATIO,
		S.CLUSTERFACTOR,
		S.SEQUENTIAL_PAGES,
		S.DENSITY,
		S.USER_DEFINED,
		S.SYSTEM_REQUIRED,
		S.CREATE_TIME,
		S.STATS_TIME,
		S.PAGE_FETCH_PAIRS,
		S.MINPCTUSED,
		S.REVERSE_SCANS,
		S.INTERNAL_FORMAT,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS,
		S.IESCHEMA,
		S.IENAME,
		S.IEARGUMENTS,
		S.INDEX_OBJECTID,
		S.NUMRIDS,
		S.NUMRIDS_DELETED,
		S.NUM_EMPTY_LEAFS,
		S.AVERAGE_RANDOM_FETCH_PAGES,
		S.AVERAGE_RANDOM_PAGES,
		S.AVERAGE_SEQUENCE_GAP,
		S.AVERAGE_SEQUENCE_FETCH_GAP,
		S.AVERAGE_SEQUENCE_PAGES,
		S.AVERAGE_SEQUENCE_FETCH_PAGES,
		S.TBSPACEID
	FROM
		SYSCAT.INDEXES S
		LEFT OUTER JOIN DOCDATA.INDEXES D
			ON S.INDSCHEMA = D.INDSCHEMA
			AND S.INDNAME = D.INDNAME!

CREATE VIEW DOCCAT.PROCEDURES AS
	SELECT
		S.PROCSCHEMA,
		S.PROCNAME,
		S.SPECIFICNAME,
		S.PROCEDURE_ID,
		S.DEFINER,
		S.PARM_COUNT,
		S.PARM_SIGNATURE,
		S.ORIGIN,
		S.CREATE_TIME,
		S.DETERMINISTIC,
		S.FENCED,
		S.NULLCALL,
		S.LANGUAGE,
		S.IMPLEMENTATION,
		S.CLASS,
		S.JAR_ID,
		S.PARM_STYLE,
		S.CONTAINS_SQL,
		S.DBINFO,
		S.PROGRAM_TYPE,
		S.RESULT_SETS,
		S.VALID,
		S.TEXT_BODY_OFFSET,
		S.TEXT,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS
	FROM
		SYSCAT.PROCEDURES S
		LEFT OUTER JOIN DOCDATA.ROUTINES D
			ON S.PROCSCHEMA = D.ROUTINESCHEMA
			AND S.SPECIFICNAME = D.SPECIFICNAME!

CREATE VIEW DOCCAT.ROUTINEPARMS AS
	SELECT
		S.ROUTINESCHEMA,
		S.ROUTINENAME,
		S.SPECIFICNAME,
		COALESCE(D.PARMNAME, S.PARMNAME) AS PARMNAME,
		S.ROWTYPE,
		S.ORDINAL,
		S.TYPESCHEMA,
		S.TYPENAME,
		S.LOCATOR,
		S.LENGTH,
		S.SCALE,
		S.CODEPAGE,
		S.CAST_FUNCSCHEMA,
		S.CAST_FUNCSPECIFIC,
		S.TARGET_TYPESCHEMA,
		S.TARGET_TYPENAME,
		S.SCOPE_TABSCHEMA,
		S.SCOPE_TABNAME,
		S.TRANSFORMGRPNAME,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS
	FROM
		SYSCAT.ROUTINEPARMS S
		LEFT OUTER JOIN DOCDATA.ROUTINEPARMS D
			ON S.ROUTINESCHEMA = D.ROUTINESCHEMA
			AND S.SPECIFICNAME = D.SPECIFICNAME
			AND S.ROWTYPE = D.ROWTYPE
			AND S.ORDINAL = D.ORDINAL!

CREATE VIEW DOCCAT.ROUTINES AS
	SELECT
		S.ROUTINESCHEMA,
		S.ROUTINENAME,
		S.ROUTINETYPE,
		S.DEFINER,
		S.SPECIFICNAME,
		S.ROUTINEID,
		S.RETURN_TYPESCHEMA,
		S.RETURN_TYPENAME,
		S.ORIGIN,
		S.FUNCTIONTYPE,
		S.PARM_COUNT,
		S.LANGUAGE,
		S.SOURCESCHEMA,
		S.SOURCESPECIFIC,
		S.DETERMINISTIC,
		S.EXTERNAL_ACTION,
		S.NULLCALL,
		S.CAST_FUNCTION,
		S.ASSIGN_FUNCTION,
		S.SCRATCHPAD,
		S.SCRATCHPAD_LENGTH,
		S.FINALCALL,
		S.PARALLEL,
		S.PARAMETER_STYLE,
		S.FENCED,
		S.SQL_DATA_ACCESS,
		S.DBINFO,
		S.PROGRAMTYPE,
		S.COMMIT_ON_RETURN,
		S.RESULT_SETS,
		S.SPEC_REG,
		S.FEDERATED,
		S.THREADSAFE,
		S.VALID,
		S.METHODIMPLEMENTED,
		S.METHODEFFECT,
		S.TYPE_PRESERVING,
		S.WITH_FUNC_ACCESS,
		S.OVERRIDDEN_METHODID,
		S.SUBJECT_TYPESCHEMA,
		S.SUBJECT_TYPENAME,
		S.CLASS,
		S.JAR_ID,
		S.JARSCHEMA,
		S.JAR_SIGNATURE,
		S.CREATE_TIME,
		S.ALTER_TIME,
		S.FUNC_PATH,
		S.QUALIFIER,
		S.IOS_PER_INVOC,
		S.INSTS_PER_INVOC,
		S.IOS_PER_ARGBYTE,
		S.INSTS_PER_ARGBYTE,
		S.PERCENT_ARGBYTES,
		S.INITIAL_IOS,
		S.INITIAL_INSTS,
		S.CARDINALITY,
		S.SELECTIVITY,
		S.RESULT_COLS,
		S.IMPLEMENTATION,
		S.LIB_ID,
		S.TEXT_BODY_OFFSET,
		S.TEXT,
		S.NEWSAVEPOINTLEVEL,
		S.DEBUG_MODE,
		S.TRACE_LEVEL,
		S.DIAGNOSTIC_LEVEL,
		S.CHECKOUT_USERID,
		S.PRECOMPILE_OPTIONS,
		S.COMPILE_OPTIONS,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS
	FROM
		SYSCAT.ROUTINES S
		LEFT OUTER JOIN DOCDATA.ROUTINES D
			ON S.ROUTINESCHEMA = D.ROUTINESCHEMA
			AND S.SPECIFICNAME = D.SPECIFICNAME!

CREATE VIEW DOCCAT.SCHEMATA AS
	SELECT
		S.SCHEMANAME,
		S.OWNER,
		S.DEFINER,
		S.CREATE_TIME,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS
	FROM
		SYSCAT.SCHEMATA S
		LEFT OUTER JOIN DOCDATA.SCHEMATA D
			ON S.SCHEMANAME = D.SCHEMANAME!

CREATE VIEW DOCCAT.TABCONST AS
	SELECT
		S.CONSTNAME,
		S.TABSCHEMA,
		S.TABNAME,
		S.DEFINER,
		S.TYPE,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS,
		S.ENFORCED,
		S.CHECKEXISTINGDATA,
		S.ENABLEQUERYOPT
	FROM
		SYSCAT.TABCONST S
		LEFT OUTER JOIN DOCDATA.TABCONST D
			ON S.TABSCHEMA = D.TABSCHEMA
			AND S.TABNAME = D.TABNAME
			AND S.CONSTNAME = S.CONSTNAME!

CREATE VIEW DOCCAT.TABLES AS
	SELECT
		S.TABSCHEMA,
		S.TABNAME,
		S.DEFINER,
		S.TYPE,
		S.STATUS,
		S.BASE_TABSCHEMA,
		S.BASE_TABNAME,
		S.ROWTYPESCHEMA,
		S.ROWTYPENAME,
		S.CREATE_TIME,
		S.STATS_TIME,
		S.COLCOUNT,
		S.TABLEID,
		S.TBSPACEID,
		S.CARD,
		S.NPAGES,
		S.FPAGES,
		S.OVERFLOW,
		S.TBSPACE,
		S.INDEX_TBSPACE,
		S.LONG_TBSPACE,
		S.PARENTS,
		S.CHILDREN,
		S.SELFREFS,
		S.KEYCOLUMNS,
		S.KEYINDEXID,
		S.KEYUNIQUE,
		S.CHECKCOUNT,
		S.DATACAPTURE,
		S.CONST_CHECKED,
		S.PMAP_ID,
		S.PARTITION_MODE,
		S.LOG_ATTRIBUTE,
		S.PCTFREE,
		S.APPEND_MODE,
		S.REFRESH,
		S.REFRESH_TIME,
		S.LOCKSIZE,
		S.VOLATILE,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS,
		S.ROW_FORMAT,
		S.PROPERTY,
		S.STATISTICS_PROFILE,
		S.COMPRESSION,
		S.ACCESS_MODE,
		S.CLUSTERED,
		S.ACTIVE_BLOCKS,
		S.DROPRULE,
		S.MAXFREESPACESEARCH
	FROM
		SYSCAT.TABLES S
		LEFT OUTER JOIN DOCDATA.TABLES D
			ON S.TABSCHEMA = D.TABSCHEMA
			AND S.TABNAME = D.TABNAME!

CREATE VIEW DOCCAT.TABLESPACES AS
	SELECT
		S.TBSPACE,
		S.DEFINER,
		S.CREATE_TIME,
		S.TBSPACEID,
		S.TBSPACETYPE,
		S.DATATYPE,
		S.EXTENTSIZE,
		S.PREFETCHSIZE,
		S.OVERHEAD,
		S.TRANSFERRATE,
		S.PAGESIZE,
		S.DBPGNAME,
		S.BUFFERPOOLID,
		S.DROP_RECOVERY,
		COALESCE(D.REMARKS, S.REMARKS) AS REMARKS,
		S.NGNAME
	FROM
		SYSCAT.TABLESPACES S
		LEFT OUTER JOIN DOCDATA.TABLESPACES D
			ON S.TBSPACE = D.TBSPACE!

-------------------------------------------------------------------------------
-- Create tools for copying comments from SYSCAT to DOCDATA and vice-versa
-------------------------------------------------------------------------------
CREATE VIEW DOCTOOLS.DOC_TO_COMMENTS (SQL) AS
	WITH DATA (TYPE, ID, REMARKS) AS (
		SELECT
			'TABLESPACE',
			D.TBSPACE,
			D.REMARKS
		FROM
			SYSCAT.TABLESPACES S
			INNER JOIN DOCDATA.TABLESPACES D
				ON S.TBSPACE = D.TBSPACE

		UNION ALL

		SELECT
			'SCHEMA',
			D.SCHEMANAME,
			D.REMARKS
		FROM
			SYSCAT.SCHEMATA S
			INNER JOIN DOCDATA.SCHEMATA D
				ON S.SCHEMANAME = D.SCHEMANAME

		UNION ALL

		SELECT
			'TABLE',
			RTRIM(D.TABSCHEMA) || '.' || D.TABNAME,
			D.REMARKS
		FROM
			SYSCAT.TABLES S
			INNER JOIN DOCDATA.TABLES D
				ON S.TABSCHEMA = D.TABSCHEMA
				AND S.TABNAME = D.TABNAME

		UNION ALL

		SELECT
			'COLUMN',
			RTRIM(D.TABSCHEMA) || '.' || RTRIM(D.TABNAME) || '.' || D.COLNAME,
			D.REMARKS
		FROM
			SYSCAT.COLUMNS S
			INNER JOIN DOCDATA.COLUMNS D
				ON S.TABSCHEMA = D.TABSCHEMA
				AND S.TABNAME = D.TABNAME
				AND S.COLNAME = D.COLNAME

		UNION ALL

		SELECT
			'CONSTRAINT',
			RTRIM(D.TABSCHEMA) || '.' || RTRIM(D.TABNAME) || '.' || D.CONSTNAME,
			D.REMARKS
		FROM
			SYSCAT.TABCONST S
			INNER JOIN DOCDATA.TABCONST D
				ON S.TABSCHEMA = D.TABSCHEMA
				AND S.TABNAME = D.TABNAME
				AND S.CONSTNAME = D.CONSTNAME

		UNION ALL

		SELECT
			'INDEX',
			RTRIM(D.INDSCHEMA) || '.' || D.INDNAME,
			D.REMARKS
		FROM
			SYSCAT.INDEXES S
			INNER JOIN DOCDATA.INDEXES D
				ON S.INDSCHEMA = D.INDSCHEMA
				AND S.INDNAME = D.INDNAME

		UNION ALL

		SELECT
			CASE WHEN S.ROUTINETYPE = 'P'
				THEN 'SPECIFIC PROCEDURE'
				ELSE 'SPECIFIC FUNCTION'
			END,
			RTRIM(D.ROUTINESCHEMA) || '.' || D.SPECIFICNAME,
			D.REMARKS
		FROM
			SYSCAT.ROUTINES S
			INNER JOIN DOCDATA.ROUTINES D
				ON S.ROUTINESCHEMA = D.ROUTINESCHEMA
				AND S.SPECIFICNAME = D.SPECIFICNAME

		UNION ALL

		SELECT
			'TYPE',
			RTRIM(D.TYPESCHEMA) || '.' || D.TYPENAME,
			D.REMARKS
		FROM
			SYSCAT.DATATYPES S
			INNER JOIN DOCDATA.DATATYPES D
				ON S.TYPESCHEMA = D.TYPESCHEMA
				AND S.TYPENAME = D.TYPENAME
	)
	SELECT
		'COMMENT ON ' || TYPE || ' ' || ID || ' IS ''' ||
			REPLACE(CAST(CASE WHEN LENGTH(REMARKS) <= 254
				THEN REMARKS
				ELSE LEFT(REMARKS, 251) || '...'
			END AS VARCHAR(254)), '''', '''''') || ''';'
	FROM
		DATA
	WHERE
		REMARKS IS NOT NULL!

CREATE PROCEDURE DOCTOOLS.COMMENTS_TO_DOC()
	SPECIFIC COMMENTS_TO_DOC
	MODIFIES SQL DATA
	NO EXTERNAL ACTION
BEGIN ATOMIC
	DELETE FROM DOCDATA.DATATYPES;
	INSERT INTO DOCDATA.DATATYPES (TYPESCHEMA, TYPENAME, REMARKS)
		SELECT TYPESCHEMA, TYPENAME, REMARKS
		FROM SYSCAT.DATATYPES
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.COLUMNS;
	INSERT INTO DOCDATA.COLUMNS (TABSCHEMA, TABNAME, COLNAME, REMARKS)
		SELECT TABSCHEMA, TABNAME, COLNAME, REMARKS
		FROM SYSCAT.COLUMNS
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.TABCONST;
	INSERT INTO DOCDATA.TABCONST (TABSCHEMA, TABNAME, CONSTNAME, REMARKS)
		SELECT TABSCHEMA, TABNAME, CONSTNAME, REMARKS
		FROM SYSCAT.TABCONST
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.INDEXES;
	INSERT INTO DOCDATA.INDEXES (INDSCHEMA, INDNAME, REMARKS)
		SELECT INDSCHEMA, INDNAME, REMARKS
		FROM SYSCAT.INDEXES
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.ROUTINES;
	INSERT INTO DOCDATA.ROUTINES (ROUTINESCHEMA, SPECIFICNAME, REMARKS)
		SELECT ROUTINESCHEMA, SPECIFICNAME, REMARKS
		FROM SYSCAT.ROUTINES
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.ROUTINEPARMS;
	INSERT INTO DOCDATA.ROUTINEPARMS (ROUTINESCHEMA, SPECIFICNAME, ROWTYPE, ORDINAL, PARMNAME, REMARKS)
		SELECT
			ROUTINESCHEMA,
			SPECIFICNAME,
			ROWTYPE,
			ORDINAL,
			CASE WHEN PARMNAME IS NULL OR PARMNAME = ''
				THEN RTRIM('P' || CHAR(ORDINAL))
				ELSE PARMNAME
			END,
			REMARKS
		FROM SYSCAT.ROUTINEPARMS
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.TABLES;
	INSERT INTO DOCDATA.TABLES (TABSCHEMA, TABNAME, REMARKS)
		SELECT TABSCHEMA, TABNAME, REMARKS
		FROM SYSCAT.TABLES
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.SCHEMATA;
	INSERT INTO DOCDATA.SCHEMATA (SCHEMANAME, REMARKS)
		SELECT SCHEMANAME, REMARKS
		FROM SYSCAT.SCHEMATA
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
	DELETE FROM DOCDATA.TABLESPACES;
	INSERT INTO DOCDATA.TABLESPACES (TBSPACE, REMARKS)
		SELECT TBSPACE, REMARKS
		FROM SYSCAT.TABLESPACES
		WHERE REMARKS IS NOT NULL AND REMARKS <> '';
END!

-------------------------------------------------------------------------------
-- COMMIT everything and finish
-------------------------------------------------------------------------------
COMMIT!
